name: "🤔 构建内核"
on:
  watch:
    types: [started]
  schedule:
    - cron: '0 8 * * */6'
  workflow_dispatch:
jobs:
  build:
         name: "🐎 构建内核 by ${{ github.actor }}"
         runs-on: ubuntu-20.04
         steps:
          - uses: actions/checkout@v3
          - name: "😎 构建编译规则"
            run: |
              echo "KERNEL_SOURCE=$(cat config.env | grep "KERNEL_SOURCE" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
              echo "KERNEL_SOURCE_BRANCH=$(cat config.env | grep "KERNEL_SOURCE_BRANCH" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
              echo "KERNEL_DEFCONFIG=$(cat config.env | grep "KERNEL_DEFCONFIG" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
              echo "TARGET_ARCH=$(cat config.env | grep "TARGET_ARCH" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
              echo "KERNEL_FILE=$(cat config.env | grep "KERNEL_FILE" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
              echo "CLANG_VERSION=$(cat config.env | grep "CLANG_VERSION" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
              echo "BUILD_EXTRA_COMMAND=$(cat config.env | grep "EXTRA_BUILD_COMMAND" | head -n 1 | cut -d ":" -f 2)" >> $GITHUB_ENV
              echo "DISABLE-LTO=$(cat config.env | grep "DISABLE-LTO" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
              echo "USE_KERNELSU=$(cat config.env | grep "USE_KERNELSU" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
              echo "USE_KPROBES=$(cat config.env | grep "USE_KPROBES" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
              echo "USE_OVERLAYFS=$(cat config.env | grep "USE_OVERLAYFS" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
              echo "NEED_DTBO=$(cat config.env | grep "NEED_DTBO" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
              echo "MAKE_BOOT_IMAGE=$(cat config.env | grep "MAKE_BOOT_IMAGE" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
              echo "SOURCE_BOOT_IMAGE=$(cat config.env | grep "SOURCE_BOOT_IMAGE" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV

          - name: "🚄 构建内核编译环境"
            run: |
              echo "BUILD_TIME=$(TZ=Asia/Shanghai date "+%Y%m%d%H%M")" >> $GITHUB_ENV
              echo "DEVICE=$(echo ${{ env.KERNEL_DEFCONFIG }} | sed 's!vendor/!!;s/_defconfig//;s/_user//;s/-perf//')" >> $GITHUB_ENV
              sudo apt-get update
              sudo apt-get install git ccache automake flex lzop bison gperf build-essential zip curl zlib1g-dev g++-multilib libxml2-utils bzip2 libbz2-dev libbz2-1.0 libghc-bzlib-dev squashfs-tools pngcrush schedtool dpkg-dev liblz4-tool make optipng maven libssl-dev pwgen libswitch-perl policycoreutils minicom libxml-sax-base-perl libxml-simple-perl bc libc6-dev-i386 lib32ncurses5-dev libx11-dev lib32z-dev libgl1-mesa-dev xsltproc unzip device-tree-compiler python2 python3
              # sh -c "$(curl -sSL https://github.com/akhilnarang/scripts/raw/master/setup/android_build_env.sh/)"
              mkdir -p $GITHUB_WORKSPACE/kernel_workspace

          - name: "🚅 下载 Clang-aosp 和 Gcc-aosp 工具"
            run: |
              cd $GITHUB_WORKSPACE/kernel_workspace
              mkdir clang-aosp
              git clone --depth=1 https://github.com/kdrag0n/proton-clang  $GITHUB_WORKSPACE/kernel_workspace/clang-aosp
          - name: "🚅 下载制造boot.img镜像工具"
            if: env.MAKE_BOOT_IMAGE == 'true'
            run: |
              cd $GITHUB_WORKSPACE/kernel_workspace
              git clone https://android.googlesource.com/platform/system/tools/mkbootimg tools -b master-kernel-build-2022 --depth=1
          
          - name: "🚅 下载同步内核源码"
            run: |
             cd $GITHUB_WORKSPACE/kernel_workspace
             git clone ${{ env.KERNEL_SOURCE }} -b ${{ env.KERNEL_SOURCE_BRANCH }} android-kernel --depth=2
             rm -rf $GITHUB_WORKSPACE/kernel_workspace/android-kernel/fs/exfat
             mkdir -p $GITHUB_WORKSPACE/kernel_workspace/android-kernel/fs/exfat
             git clone --depth=2 https://github.com/arter97/exfat-linux $GITHUB_WORKSPACE/kernel_workspace/android-kernel/fs/exfat
             git submodule update --init
        
          - name: "💫  下载内置构建完成的boot.img"
            if: env.MAKE_BOOT_IMAGE == 'true'
            run: |
              cd $GITHUB_WORKSPACE/kernel_workspace
              wget -O boot-source.img ${{ env.SOURCE_BOOT_IMAGE }}
              if [ -f boot-source.img ]; then
                  echo "FORMAT_MKBOOTING=$(echo `tools/unpack_bootimg.py --boot_img=boot-source.img --format mkbootimg`)" >> $GITHUB_ENV
                  echo "HAVE_SOURCE_BOOT_IMAGE=true" >> $GITHUB_ENV
              else
                  echo "Source boot image is empty"
              fi

          - name: "😋 添加并设置KernelSU"
            if: env.USE_KERNELSU == 'true'
            run: |
              cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
              #此处为修改KSU分支,目前为开发分支,稳定分支去除s main
              curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -s main
              if [ ${{ env.USE_KPROBES }} = true ]; then
                echo "CONFIG_MODULES=y" >> arch/${{ env.TARGET_ARCH }}/configs/${{ env.KERNEL_DEFCONFIG }}
                echo "CONFIG_KPROBES=y" >> arch/${{ env.TARGET_ARCH }}/configs/${{ env.KERNEL_DEFCONFIG }}
                echo "CONFIG_HAVE_KPROBES=y" >> arch/${{ env.TARGET_ARCH }}/configs/${{ env.KERNEL_DEFCONFIG }}
                echo "CONFIG_KPROBE_EVENTS=y" >> arch/${{ env.TARGET_ARCH }}/configs/${{ env.KERNEL_DEFCONFIG }}
              fi
              if [ ${{ env.USE_OVERLAYFS }} = true ]; then
                echo "CONFIG_OVERLAY_FS=y" >> arch/${{ env.TARGET_ARCH }}/configs/${{ env.KERNEL_DEFCONFIG }}
              fi
              if [ ${{ env.DISABLE-LTO }} = true ]; then
                sed -i 's/CONFIG_LTO=y/CONFIG_LTO=n/' arch/${{ env.TARGET_ARCH }}/configs/${{ env.KERNEL_DEFCONFIG }}
                sed -i 's/CONFIG_LTO_CLANG=y/CONFIG_LTO_CLANG=n/' arch/${{ env.TARGET_ARCH }}/configs/${{ env.KERNEL_DEFCONFIG }}
                sed -i 's/CONFIG_THINLTO=y/CONFIG_THINLTO=n/' arch/${{ env.TARGET_ARCH }}/configs/${{ env.KERNEL_DEFCONFIG }}
                echo "CONFIG_LTO_NONE=y" >> arch/${{ env.TARGET_ARCH }}/configs/${{ env.KERNEL_DEFCONFIG }}
              fi
              echo "UPLOADNAME=KernelSU" >> $GITHUB_ENV

          - name: "😎 构建内核"
            run: |
             cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
              export PATH=$GITHUB_WORKSPACE/kernel_workspace/clang-aosp/bin:$PATH
              echo "CONFIG_BUILD_ARM64_KERNEL_COMPRESSION_GZIP=y" >> arch/${{ env.TARGET_ARCH }}/configs/${{ env.KERNEL_DEFCONFIG }}
              echo "CONFIG_FB_CFB_IMAGEBLIT=y" >> arch/${{ env.TARGET_ARCH }}/configs/${{ env.KERNEL_DEFCONFIG }}
              export KBUILD_BUILD_HOST=Github-Action
              export KBUILD_BUILD_USER=$(echo ${{ github.actor }} | tr A-Z a-z)
             #设置内核在设置中名称,上为自定义,下为自动生成
              sed -i 's/CONFIG_LOCALVERSION="-Xiaomi_HyperOS-A14"/CONFIG_LOCALVERSION="-Xiaomi_HyperOS-A14"/' arch/arm64/configs/cepheus_defconfig
              # sed -i 's/# CONFIG_LOCALVERSION_AUTO is not set/CONFIG_LOCALVERSION_AUTO=y/' arch/arm64/configs/cepheus_defconfig
              rm -f scripts/mkcompile_h
              cp $GITHUB_WORKSPACE/mkcompile_h scripts/
              make -j$(nproc --all) O=out ARCH=${{ env.TARGET_ARCH }} CC=clang CROSS_COMPILE=aarch64-linux-gnu- CROSS_COMPILE_ARM32=arm-linux-gnueabi- ${{ env.BUILD_EXTRA_COMMAND }} ${{ env.KERNEL_DEFCONFIG }}
              make -j$(nproc --all) O=out ARCH=${{ env.TARGET_ARCH }} CC=clang CROSS_COMPILE=aarch64-linux-gnu- CROSS_COMPILE_ARM32=arm-linux-gnueabi- ${{ env.BUILD_EXTRA_COMMAND }}

          - name: "💛 Check a kernel output files"
            run: |
               cd $GITHUB_WORKSPACE/kernel_workspace
               if [ -f android-kernel/out/arch/${{ env.TARGET_ARCH }}/boot/${{ env.KERNEL_FILE }} ]; then
                   echo "CHECK_FILE_IS_OK=true" >> $GITHUB_ENV
               else
                   echo "Kernel output file is empty"
               fi
               if [ -f android-kernel/out/arch/${{ env.TARGET_ARCH }}/boot/dtbo.img ]; then
                   echo "CHECK_DTBO_IS_OK=true" >> $GITHUB_ENV
               else
                   echo "DTBO image is empty"
               fi

          - name: "💙 Make Anykernel3"
            if: env.CHECK_FILE_IS_OK == 'true'
            run: |
                cd $GITHUB_WORKSPACE/kernel_workspace
                mkdir anykernel
                git clone https://github.com/osm0sis/AnyKernel3 anykernel
                # git clone https://github.com/Laulan56/anykernel -b miui-r
                # sed -i 's/do.devicecheck=1/do.devicecheck=0/g' anykernel/anykernel.sh
                # sed -i 's!block=/dev/block/platform/omap/omap_hsmmc.0/by-name/boot;!block=auto;!g' AnyKernel3/anykernel.sh
                # sed -i 's/is_slot_device=0;/is_slot_device=auto;/g' AnyKernel3/anykernel.sh
                cp android-kernel/out/arch/${{ env.TARGET_ARCH }}/boot/${{ env.KERNEL_FILE }} anykernel/
                rm -rf anykernel/anykernel.sh
                cp $GITHUB_WORKSPACE/anykernel.sh anykernel/
                if [ ${{ env.CHECK_DTBO_IS_OK }} = true ]; then
                    cp android-kernel/out/arch/${{ env.TARGET_ARCH }}/boot/dtbo.img anykernel/
                fi
                rm -rf anykernel/.git* anykernel/README.md

          - name: "💜 Make boot image"
            if: env.HAVE_SOURCE_BOOT_IMAGE == 'true' && env.CHECK_FILE_IS_OK == 'true'
            run: |
                cd $GITHUB_WORKSPACE/kernel_workspace
                tools/unpack_bootimg.py --boot_img boot-source.img
                cp android-kernel/out/arch/${{ env.TARGET_ARCH }}/boot/${{ env.KERNEL_FILE }} out/kernel
                tools/mkbootimg.py ${{ env.FORMAT_MKBOOTING }} -o boot.img
                if [ -f boot.img ]; then
                    echo "MAKE_BOOT_IMAGE_IS_OK=true" >> $GITHUB_ENV
                else
                    echo "Boot image is empty"
                fi
    
          - name: "❤️ Upload AnyKernel3"
            if: env.CHECK_FILE_IS_OK == 'true'
            uses: actions/upload-artifact@v3
            with:
              name: ${{ env.UPLOADNAME }}-${{ env.DEVICE }}-${{ env.BUILD_TIME }}
              path: kernel_workspace/anykernel/*

          - name: "❤️ Upload boot image"
            if: env.MAKE_BOOT_IMAGE_IS_OK == 'true'
            uses: actions/upload-artifact@v3
            with:
                name: boot${{ env.UPLOADNAME }}-${{ env.DEVICE }}-${{ env.BUILD_TIME }}
                path: kernel_workspace/boot.img
       
